#!/bin/bash

# Script to install the ansible commands on a clean Debian machine.
# Uses the Docker-Ansible image. Assumes Docker is already installed.
# Should be idempotent and suitable for use from Ansible.

# return value:
#     0 if success
#     1 if error
#     3 if nothing changed

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
. "$DIR/bash.conf"

IMAGENAME="j842/ansible"
RVAL=3

# check we're root on Debian and Docker is installed
if [ "$EUID" -ne 0 ]; then 
  echo "Please run as root"
  exit 1
fi
if [ $(uname -rv | grep -c "Debian") -eq 0 ]; then
  echo "This script is only for Debian hosts."
  exit 1
fi
if ! command_exists docker ; then 
  echo "Docker needs to be installed first."
  exit 1
fi

# create a command which is run via docker
function makefile {
  if [ ! -e /usr/local/bin/"$1" ]; then
    cat <<EOF | tr -s ' ' >/usr/local/bin/$1 
#!/bin/bash

docker run --name=ansible -ti                           \
       -v "${VOLUME_VCMD}" -v "${ANSIBLE_VCMD}"         \
       ${CONTAINER_NAME} /usr/local/bin/ansiblerun $1 \$@
docker rm ansible  > /dev/null
EOF
    chmod a+x /usr/local/bin/"$1"
    echo "Created /usr/local/bin/$1"
    RVAL=0
fi 
}

# ------------ CONFIGURE ANSIBLE CONTAINER --------------------------

# configure those ansible commands
COMMANDS=(ansible ansible-doc ansible-galaxy ansible-playbook ansible-pull ansible-vault)
for CMD in "${COMMANDS[@]}"; do
  makefile $CMD
done

# get the latest docker image, set RVAL if changed.
echo "Checking we have latest Docker-Ansible image..."
if [ $(docker pull ${CONTAINER_NAME} | grep -c "Image is up to date") -eq 0 ]; then
  RVAL=0
fi

#------------------------

exit ${RVAL}
